---
interface Props {
  id: string;
  name: string;
  label: string;
  options: { value: string; label: string; }[];
  required?: boolean;
  defaultValue?: string;
  onChange?: string;
}

const { id, name, label, options, required = false, defaultValue = '', onChange } = Astro.props;
---

<div class="relative" x-data={`{
    open: false,
    selected: '${defaultValue}',
    options: ${JSON.stringify(options)},
    getSelectedLabel() {
      if (!this.selected) return 'Maak een keuze';
      const option = this.options.find(opt => opt.value === this.selected);
      return option ? option.label : 'Maak een keuze';
    },
    handleChange() {
      if (typeof window.${onChange} === 'function') {
        window.${onChange}(this.selected);
      }
    }
  }`}>
  <label for={id} class="block text-sm font-medium text-gray-700 mb-2">{label}</label>
  <button
    type="button"
    class="relative w-full bg-white rounded-md py-3 px-4 text-left cursor-pointer shadow-sm focus-ring sm:text-sm"
    @click="open = !open"
    aria-haspopup="listbox"
    :aria-expanded="open"
  >
    <span class="block truncate text-gray-900" x-text="getSelectedLabel()"></span>
    <span class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
      <svg 
        class="h-5 w-5 text-gray-400 transition-transform duration-200" 
        :class="{ 'rotate-180': open }"
        viewBox="0 0 20 20" 
        fill="none" 
        stroke="currentColor"
      >
        <path d="M7 7l3-3 3 3m0 6l-3 3-3-3" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </span>
  </button>

  <input type="hidden" id={id} name={name} :value="selected" required={required}>

  <div
    x-show="open"
    x-transition:enter="transition ease-out duration-100"
    x-transition:enter-start="transform opacity-0 scale-95"
    x-transition:enter-end="transform opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="transform opacity-100 scale-100"
    x-transition:leave-end="transform opacity-0 scale-95"
    class="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base overflow-auto focus:outline-none sm:text-sm"
    tabindex="-1"
    role="listbox"
    @click.away="open = false"
    style="display: none;"
  >
    <template x-for="option in options" :key="option.value">
      <div
        class="cursor-pointer select-none relative py-3 px-4 hover:bg-primary-50 text-gray-900"
        role="option"
        @click="selected = option.value; open = false; handleChange()"
        :class="{ 'bg-primary-50': selected === option.value }"
      >
        <span class="block truncate" :class="{ 'font-semibold': selected === option.value }" x-text="option.label"></span>
      </div>
    </template>
  </div>
</div>