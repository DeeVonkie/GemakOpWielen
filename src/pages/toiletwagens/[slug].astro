---
import Layout from '../../layouts/Layout.astro';
import TrailerSpecifications from '../../components/TrailerSpecifications.astro';
import TrailerFAQ from '../../components/TrailerFAQ.astro';
import { trailers } from '../../data/trailers';

const { slug } = Astro.params;
const trailer = trailers.find(trailer => trailer.slug === slug);

if (!trailer) {
  const errorMessage = `Trailer with slug "${slug}" not found.`;
  return Astro.redirect('/404?message=' + errorMessage);
}
---

<Layout 
  title={trailer.title}
  description={trailer.description}
>
  <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
      <!-- Image gallery -->
      <div class="flex flex-col">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div class="w-full aspect-w-1 aspect-h-1 bg-white rounded-lg overflow-hidden sm:col-span-2">
            <img
              src={trailer.images[0]}
              alt={trailer.title}
              class="w-full h-full object-center object-cover cursor-pointer gallery-image"
              onclick="openImageViewer(0)"
            />
          </div>
          {trailer.images.slice(1, 3).map((image, index) => (
            <div class="w-full aspect-w-1 aspect-h-1 bg-white rounded-lg overflow-hidden">
              <img
                src={image}
                alt={`${trailer.title} - ${index + 2}`}
                class="w-full h-full object-center object-cover cursor-pointer gallery-image"
                onclick={`openImageViewer(${index + 1})`}
              />
            </div>
          ))}
        </div>
        {trailer.images.length > 3 && (
          <button id="view-more-images" class="mt-4 px-4 py-2 flex-1 text-center px-4 py-2 border border-primary-700 text-primary-700 rounded-md hover:bg-primary-50 transition-colors duration-200 self-start">
            <strong>+</strong> Bekijk nog {trailer.images.length - 3 === 1 && (
              "1 foto's"
            )} {trailer.images.length - 3 > 1 && (
              trailer.images.length - 3 + " foto's"
            )}
          </button>
        )}
      </div>

      <!-- Trailer info -->
      <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
        <h1 class="text-3xl font-extrabold tracking-tight text-gray-900">{trailer.title}</h1>
        <div class="mt-3">
          <p class="text-lg text-gray-600">{trailer.description}</p>
        </div>

        <!-- Pricing Section -->
        <div class="mt-8 border-t border-gray-200 pt-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Tarieven</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
              <h3 class="text-lg font-medium text-gray-900">Per dag</h3>
              <p class="mt-2 text-2xl font-bold text-primary-700">€{trailer.pricing.day}</p>
              <p class="mt-1 text-sm text-gray-500">{trailer.pricing.btw} BTW</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
              <h3 class="text-lg font-medium text-gray-900">Per weekend</h3>
              <p class="mt-2 text-2xl font-bold text-primary-700">€{trailer.pricing.weekend}</p>
              <p class="mt-1 text-sm text-gray-500">{trailer.pricing.btw} BTW</p>
            </div>
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
              <h3 class="text-lg font-medium text-gray-900">Per week</h3>
              <p class="mt-2 text-2xl font-bold text-primary-700">€{trailer.pricing.week}</p>
              <p class="mt-1 text-sm text-gray-500">{trailer.pricing.btw} BTW</p>
            </div>
          </div>
        </div>

        <div class="mt-8 border-t border-gray-200 pt-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Kenmerken</h2>
          <div class="mt-4">
            <ul class="space-y-2">
              {trailer.features.map(feature => (
                <li class="flex items-center text-gray-600">
                  <svg class="h-5 w-5 text-primary-700 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  {feature}
                </li>
              ))}
            </ul>
          </div>
        </div>

        <div class="mt-6 flex space-x-3">
          <a href={`/boeken?trailer=${trailer.slug}`} class="flex-1 text-center px-4 py-2 bg-primary-700 text-white rounded-md hover:bg-primary-800 transition-colors duration-200">
            Direct Boeken
          </a>
          <a href="/contact" class="flex-1 text-center px-4 py-2 border border-primary-700 text-primary-700 rounded-md hover:bg-primary-50 transition-colors duration-200">
            Contact Opnemen
          </a>
        </div>
      </div>
    </div>

    <div class="mt-16">
      <TrailerSpecifications specifications={trailer.specifications} />
    </div>

    <TrailerFAQ />
  </div>

  <!-- Image Viewer Modal -->
  <div id="image-viewer-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-50 p-4">
    <div class="relative max-w-full w-full md:max-w-3xl mx-auto">
      <div class="relative w-full flex items-center justify-center">
        <button id="prev-image" class="absolute left-2 text-white text-2xl bg-primary-700 hover:bg-primary-800 transition-colors duration-200 rounded-full p-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-5 w-5">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <img id="image-viewer-image" src="" alt="Image Viewer" class="max-w-full max-h-full rounded-lg mx-auto" />
        <button id="next-image" class="absolute right-2 text-white text-2xl bg-primary-700 hover:bg-primary-800 transition-colors duration-200 rounded-full p-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-5 w-5">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // import { effect } from 'astro:schema';
  import { getTrailerById } from '../../data/trailers';
  import Hammer from 'hammerjs';

  declare global {
    interface Window {
      openImageViewer: (index: number) => void;
    }
  }

  const slug = location.pathname.split('/').slice(1)[1];
  const trailer = getTrailerById(slug);

  document.addEventListener('DOMContentLoaded', () => {
    const viewMoreButton = document.getElementById('view-more-images');
    const imageViewerModal = document.getElementById('image-viewer-modal');
    const imageViewerImage = document.getElementById('image-viewer-image') as HTMLImageElement;
    const closeImageViewerButton = document.getElementById('close-image-viewer');
    const prevImageButton = document.getElementById('prev-image');
    const nextImageButton = document.getElementById('next-image');

    let currentImageIndex = 0;

    const openImageViewer = (index) => {
      currentImageIndex = index;
      imageViewerImage.src = trailer.images[currentImageIndex];
      imageViewerModal.classList.remove('hidden');
    };

    const closeImageViewer = () => {
      imageViewerModal.classList.add('hidden');
    };

    const showNextImage = () => {
      currentImageIndex = (currentImageIndex + 1) % trailer.images.length;
      imageViewerImage.src = trailer.images[currentImageIndex];
    };

    const showPrevImage = () => {
      currentImageIndex = (currentImageIndex - 1 + trailer.images.length) % trailer.images.length;
      imageViewerImage.src = trailer.images[currentImageIndex];
    };

    if (viewMoreButton) {
      viewMoreButton.addEventListener('click', () => openImageViewer(0));
    }

    if (closeImageViewerButton) {
      closeImageViewerButton.addEventListener('click', closeImageViewer);
    }

    if (prevImageButton) {
      prevImageButton.addEventListener('click', showPrevImage);
    }

    if (nextImageButton) {
      nextImageButton.addEventListener('click', showNextImage);
    }

    imageViewerModal.addEventListener('click', (event) => {
      if (event.target === imageViewerModal) {
        closeImageViewer();
      }
    });

    document.addEventListener('keydown', (event) => {
      if (imageViewerModal.classList.contains('hidden')) { 
        return;
      } else {
        if (event.key === 'ArrowRight') {
          showNextImage();
        } else if (event.key === 'ArrowLeft') {
          showPrevImage();
        } else if (event.key === 'Escape') {
          closeImageViewer();
        } else if (event.key === 'ArrowDown') {
          event.preventDefault();
        } else if (event.key === 'ArrowUp') {
          event.preventDefault();
        }
      }
    });

    // Add swipe functionality using Hammer.js
    const hammer = new Hammer(imageViewerModal);
    hammer.on('swipeleft', showNextImage);
    hammer.on('swiperight', showPrevImage);

    window.openImageViewer = openImageViewer;
  });
</script>

<style>
  .gallery-image {
    aspect-ratio: 1 / 1;
    object-fit: cover;
  }
</style>